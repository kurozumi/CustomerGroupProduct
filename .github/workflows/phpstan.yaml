name: PHPStan
on: [workflow_dispatch, pull_request]
env:
  PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  PLUGIN_CODE: CustomerGroupProduct
  PLUGIN_BRANCH: '4.2'
  CUSTOMER_GROUP_CODE: CustomerGroup
  CUSTOMER_GROUP_BRANCH: '4.2'

jobs:
  phpstan:
    name: PHPStan
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        eccube-versions: ['4.2']
        php-versions: [ '7.4', '8.0', '8.1' ]

    steps:
      - name: Checkout EC-CUBE
        uses: actions/checkout@v2
        with:
          repository: EC-CUBE/ec-cube
          ref: ${{ matrix.eccube-versions }}

      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@master #https://github.com/shivammathur/setup-php
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, xml, ctype, iconv, mysql, intl
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: |
          composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Setup CustomerGroup
        run: |
          git clone -b ${{ env.CUSTOMER_GROUP_BRANCH }} https://$PERSONAL_ACCESS_TOKEN:x-oauth-basic@github.com/kurozumi/CustomerGroup.git app/Plugin/${{ env.CUSTOMER_GROUP_CODE }}

      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: app/Plugin/${{ env.PLUGIN_CODE }}
          ref: ${{ env.PLUGIN_BRANCH }}

      - name: PHPStan
        run: |
          composer require phpstan/phpstan --dev
          vendor/bin/phpstan analyze app/Plugin/${{ env.PLUGIN_CODE }} -c "app/Plugin/${{ env.PLUGIN_CODE }}/phpstan.neon" --error-format=github
